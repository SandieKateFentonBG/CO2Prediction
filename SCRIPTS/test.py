# 1 LR_RIDGE_Blender_NBest
y1=[599.6864332768943, 599.067572403355, 573.2323221167238, 603.0672694870549, 581.2001174639905, 579.751609141545, 592.8099242912734, 606.2121309862978, 588.5123471296104, 579.0041653742378, 572.2123664971618, 585.939416020329, 596.4094968644588, 595.4017542791903, 603.7935298748325, 636.4655058601305, 622.684582774869, 627.8324039568646, 603.6425220120286, 653.2856124946913, 566.2268664740731, 582.4364973699654, 610.9537213311606, 626.2880254438774, 596.3711482119066, 599.1412098942984, 584.7263749705287, 622.9672154809697, 625.1024543806766, 611.01239056853, 585.6278101968143, 620.2934196778593, 585.1933277180636, 589.905580575749, 597.2464598215151, 599.4214637332282, 594.2543357483082, 590.6579981287375, 579.5935200476074, 624.0722230395563, 599.4565629984144, 558.2724522243906, 604.8527431782704, 653.0626278806199, 561.0729063306235, 587.5245263524954, 637.264307361784, 621.1323664157366, 598.0306686202609, 601.3653285590168, 585.8178982389707, 606.2741429263381, 602.6963540605261, 607.8057637996437, 596.1130927670413, 635.0771380732645, 574.913059019624, 600.6337418787202, 605.5531749272129, 607.1206965667157]
x1=[606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374]
# 1 SVR_RBF_Blender_NBest
y2=[589.6089903913762, 587.6354932890707, 551.4060680557735, 590.426543638805, 566.3177232183151, 568.1552859424265, 586.6907760616845, 602.4187849073929, 578.1846485270073, 569.2176993624221, 582.5249631034104, 577.0787331320548, 608.6264090221048, 613.2327886054302, 585.8602839528808, 611.1322352093658, 575.4703765602035, 607.7976553437989, 606.975008393615, 602.4779275272488, 606.5742993859564, 602.7993611021644, 560.8783373346256, 598.4206454747115, 589.4758713099486, 589.8124632928993, 565.0218435955442, 616.8617395714247, 616.6396857614307, 593.8242849524403, 584.191281705542, 617.8928753020814, 582.3792176279983, 575.4853147850251, 612.2473503411377, 596.8509667674978, 593.7280390598307, 593.1625140941873, 572.0569365700196, 604.1888960784497, 575.0424212648115, 556.392636608681, 583.9673966139043, 622.0846641232469, 569.3299486962702, 578.4090042729605, 603.5237354382945, 600.7921687390809, 588.4644618914092, 591.2119169373551, 568.7553053099382, 597.7189424310151, 583.794946607143, 590.182192437055, 594.4198162944491, 636.0088616290101, 579.5905204013741, 585.7455365325485, 620.4052348974941, 595.0332979766282]
x2=[606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374, 606.444, 608.658654, 625.957198, 584.7814285, 607.8070255, 544.93, 641.841087, 614.547293, 655.6913685, 559.2100085, 646.929709, 583.68374]
# 1 NBest
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

setyLim = [0, 30]  # None
setxLim = [500,700]  # None

# index =
columns = ['SVR_truth', 'SVR_pred', 'LR_truth', 'LR_pred']
content = [x1, y1, x2, y2]
Df = pd.DataFrame(columns=columns) #, index=index
for name, val in zip(columns, content):
    Df[name] = val

columns = ['SVR_truth', 'SVR_pred']
content = [x1, y1]
SVR_Df = pd.DataFrame(columns=columns) #, index=index
for name, val in zip(columns, content):
    SVR_Df[name] = val

columns = ['LR_truth', 'LR_pred']
content = [x2, y2]
LR_Df = pd.DataFrame(columns=columns) #, index=index
for name, val in zip(columns, content):
    LR_Df[name] = val

print(LR_Df)
# sns.scatterplot(y = y1, x = x1)
# sns.scatterplot(y = y1, x = y1)
# sns.scatterplot(y = x1, x = x1)

# fig, ax = plt.subplots()

# sns.displot(Df, x='LR_pred', binwidth=5, multiple="layer", palette = "vlag") #x="predicted",

sns.displot(SVR_Df, binwidth=5, multiple="layer", palette = "vlag")
sns.displot(LR_Df, binwidth=5, multiple="layer", palette = "vlag")

# sns.displot(Df, x='SVR_truth',  binwidth=10) #x="predicted",
# sns.displot(Df, x='SVR_truth',  binwidth=10) #x="predicted",
# sns.displot(x=x1,  binwidth=10) #x="groundtruth",

if setxLim:
    xLim = (setxLim[0], setxLim[1])
    plt.xlim(xLim)

if setyLim:
    yLim = (setyLim[0], setyLim[1])
    plt.ylim(yLim)

plt.show()
