import numpy as np
import matplotlib.pyplot as plt
from Main import *


def plot_3DML1M(xs, ys, zs, rlist, best, title, xlabel, ylabel, zlabel, size, showgrid, colors ="b", ticks = False, lim = False,
            output_path = None, VISU = False):

    # Create figure and axes
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(xs, ys, zs, color=colors)
    ax.scatter(best[0], best[1], best[2], s = 50, c='r') #, plotnonfinite = False
    lines = rlist
    for i in range(len(lines)):
        xls, yls, zls = lines[i][0], lines[i][1], lines[i][2]
        plt.plot(xls, yls, zls, color=colors)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_zlabel(zlabel)
    ax.set_zlim(0.3050, 0.3060)
    if lim :
        ax.set_xlim(lim[0][0], lim[0][1])
        ax.set_ylim(lim[1][0], lim[1][1])
        ax.set_zlim(lim[2][0], lim[2][1])
    if ticks :
        ax.set_xticks(ticks[0])
        ax.set_yticks(ticks[1])
        ax.set_zticks(ticks[2])
    fig.set_size_inches(size[0], size[1])
    ax.grid(showgrid)
    if output_path :
        plt.savefig(output_path + title + '.png')
    if VISU:
        plt.show()


colors = ['r', 'g', 'b', 'y']
title = 'matrix completion'
xlabel, ylabel, zlabel = 'Model', 'Regularization', 'MSE'
size = [6,6]
showgrid = False

xli = [i for i in range(len(models))] #models
yli = [0.001, 0.01, 0.1, 1, 5, 10, 20, 50, 100] #param
zli = models[i][j]['mse'] for j in reguls for i in models #score
xli, yli, zli = [0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],[10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500, 10, 20, 40, 80, 100, 200, 300, 400, 500],[0.8998308181762695, 0.904266357421875, 0.9184490442276001, 0.9189745187759399, 0.9209707379341125, 0.922264575958252, 0.9213234186172485, 0.9226369857788086, 0.9212254285812378, 0.8988103866577148, 0.9113826751708984, 0.9153265357017517, 0.9185622334480286, 0.920066237449646, 0.9213452339172363, 0.9225938320159912, 0.9266828894615173, 0.9223410487174988, 0.906748354434967, 0.9082571268081665, 0.9177031517028809, 0.919774055480957, 0.9195590615272522, 0.9228907227516174, 0.920924961566925, 0.9244608879089355, 0.9222382307052612, 0.9048441648483276, 0.9096971154212952, 0.9149297475814819, 0.9182502627372742, 0.918417751789093, 0.9209059476852417, 0.9218708276748657, 0.9221733212471008, 0.9218764305114746, 0.90146803855896, 0.9080074429512024, 0.9145246744155884, 0.9198074340820312, 0.9216476678848267, 0.9207457900047302, 0.9209406971931458, 0.9212194085121155, 0.9200433492660522, 0.9108366370201111, 0.9079103469848633, 0.9161508083343506, 0.9221482276916504, 0.9192045331001282, 0.9200649261474609, 0.920525312423706, 0.9236586689949036, 0.9191445112228394, 0.9019386172294617, 0.9056298136711121, 0.915471613407135, 0.9176559448242188, 0.9207924008369446, 0.9207082986831665, 0.9194381833076477, 0.9208956360816956, 0.9191671013832092, 0.9072545766830444, 0.9177035689353943, 0.921437680721283, 0.9209294319152832, 0.9240227341651917, 0.9221810698509216, 0.9196587204933167, 0.9200179576873779, 0.9208905100822449]
xl, yl, zl = np.array(xli), np.array(yli), np.array(zli)
rl = [[[0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.8998308181762695, 0.904266357421875, 0.9184490442276001, 0.9189745187759399, 0.9209707379341125, 0.922264575958252, 0.9213234186172485, 0.9226369857788086, 0.9212254285812378]], [[0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.8988103866577148, 0.9113826751708984, 0.9153265357017517, 0.9185622334480286, 0.920066237449646, 0.9213452339172363, 0.9225938320159912, 0.9266828894615173, 0.9223410487174988]], [[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.906748354434967, 0.9082571268081665, 0.9177031517028809, 0.919774055480957, 0.9195590615272522, 0.9228907227516174, 0.920924961566925, 0.9244608879089355, 0.9222382307052612]], [[1, 1, 1, 1, 1, 1, 1, 1, 1], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.9048441648483276, 0.9096971154212952, 0.9149297475814819, 0.9182502627372742, 0.918417751789093, 0.9209059476852417, 0.9218708276748657, 0.9221733212471008, 0.9218764305114746]], [[5, 5, 5, 5, 5, 5, 5, 5, 5], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.90146803855896, 0.9080074429512024, 0.9145246744155884, 0.9198074340820312, 0.9216476678848267, 0.9207457900047302, 0.9209406971931458, 0.9212194085121155, 0.9200433492660522]], [[20, 20, 20, 20, 20, 20, 20, 20, 20], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.9108366370201111, 0.9079103469848633, 0.9161508083343506, 0.9221482276916504, 0.9192045331001282, 0.9200649261474609, 0.920525312423706, 0.9236586689949036, 0.9191445112228394]], [[100, 100, 100, 100, 100, 100, 100, 100, 100], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.9019386172294617, 0.9056298136711121, 0.915471613407135, 0.9176559448242188, 0.9207924008369446, 0.9207082986831665, 0.9194381833076477, 0.9208956360816956, 0.9191671013832092]], [[1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], [10, 20, 40, 80, 100, 200, 300, 400, 500], [0.9072545766830444, 0.9177035689353943, 0.921437680721283, 0.9209294319152832, 0.9240227341651917, 0.9221810698509216, 0.9196587204933167, 0.9200179576873779, 0.9208905100822449]]]
b = [0.01, 400, 0.9266828894615173]
xlim, ylim, zlim = [np.amin(xl), np.amax(xl)], [np.amin(yl), np.amax(yl)], [0.890, 0.931] #[np.amin(zs), np.amax(zl)]
lim = xlim, ylim, zlim
[xticks, yticks, zticks] = np.arange(0.00, 1001, 200).tolist(), np.arange(0, 511, 50).tolist(), np.arange(0.890, 0.931, 0.005).tolist()
ticks = [xticks, yticks, zticks]
#PLOT
plot_3DML1M(xl, yl, zl, rl, b, title, xlabel, ylabel, zlabel, size, showgrid, colors ="b", ticks = ticks, lim = lim,
            output_path = None, VISU = True)
